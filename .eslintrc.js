// disable compile check
const DEV_ERROR = 'error';
const REACT_ERROR = 2;

const overrideRules = {
  'react-hooks/rules-of-hooks': DEV_ERROR,
  'react-hooks/exhaustive-deps': 'off',
  'react/jsx-curly-newline': [ REACT_ERROR ],
  'react/jsx-curly-spacing': [ REACT_ERROR, { when: 'always', children: true } ],
  'react/jsx-equals-spacing': [ REACT_ERROR, 'never' ],
  'react/jsx-tag-spacing': [ REACT_ERROR, { beforeSelfClosing: 'always' } ],
  'no-extra-semi': [ DEV_ERROR ],
  'no-mixed-spaces-and-tabs': [ DEV_ERROR, 'smart-tabs' ],
  'no-unreachable': [ DEV_ERROR ],
  'no-unused-vars': [ DEV_ERROR ],
  'array-bracket-spacing': [ DEV_ERROR, 'always' ],
  'array-element-newline': [
    DEV_ERROR,
    {
      multiline: true,
      minItems: 3,
    },
  ],
  'block-spacing': [ DEV_ERROR, 'always' ],
  'object-curly-spacing': [ DEV_ERROR, 'always' ],
  'quotes': [
    DEV_ERROR,
    'single',
    { allowTemplateLiterals: true },
  ],
  'quote-props': [ DEV_ERROR, 'consistent-as-needed' ],
  'comma-spacing': [
    DEV_ERROR,
    {
      before: false,
      after: true,
    },
  ],
  'comma-style': [ DEV_ERROR ],
  'array-bracket-newline': [ DEV_ERROR, { multiline: true } ],
  'object-curly-newline': [ DEV_ERROR, { multiline: true } ],
  'indent': [
    'warn',
    2,
    { SwitchCase: 1 },
  ],
  'sort-imports': [ DEV_ERROR, { ignoreDeclarationSort: true, allowSeparatedGroups: true } ],
  'semi': [ DEV_ERROR, 'always' ],
  'semi-spacing': [ DEV_ERROR ],
  'semi-style': [ DEV_ERROR, 'last' ],
  'comma-dangle': [
    DEV_ERROR,
    {
      arrays: 'always-multiline',
      objects: 'always-multiline',
      imports: 'always-multiline',
      exports: 'always-multiline',
      functions: 'never',
    },
  ],
  'newline-per-chained-call': [ DEV_ERROR, { ignoreChainWithDepth: 1 } ],
  'no-extra-boolean-cast': [ 'error' ],
  'no-empty': [ 'error' ],
  'implicit-arrow-linebreak': [ DEV_ERROR, 'beside' ],
  // 'jsonc/sort-keys': [ DEV_ERROR ],
  'jsonc/indent': [
    DEV_ERROR,
    2,
    {},
  ],
  'jsonc/array-bracket-spacing': [ DEV_ERROR, 'always' ],
  'jsonc/array-bracket-newline': [
    DEV_ERROR,
    {
      multiline: true,
      minItems: 2,
    },
  ],
  'jsonc/array-element-newline': [
    DEV_ERROR,
    {
      multiline: true,
      minItems: 2,
    },
  ],
  'jsonc/object-curly-newline': [ DEV_ERROR, { minProperties: 2 } ],
  'jsonc/object-curly-spacing': [ DEV_ERROR, 'always' ],
  'jsonc/key-spacing': [
    DEV_ERROR,
    {
      beforeColon: false,
      afterColon: true,
      mode: 'strict',
    },
  ],
  'jsx-quotes': [ DEV_ERROR, 'prefer-double' ],
  'key-spacing': [
    DEV_ERROR,
    {
      beforeColon: false,
      afterColon: true,
      mode: 'strict',
    },
  ],
  'arrow-spacing': [ DEV_ERROR ],
  'prefer-arrow-callback': [ DEV_ERROR ],
  'arrow-body-style': [ DEV_ERROR, 'as-needed' ],
  'arrow-parens': [ DEV_ERROR, 'as-needed' ],
  'no-confusing-arrow': [ DEV_ERROR ],
  'no-multi-spaces': [ DEV_ERROR ],
  'no-trailing-spaces': [ DEV_ERROR ],
  'space-in-parens': [ DEV_ERROR, 'never' ],
  'space-before-function-paren': [
    DEV_ERROR,
    {
      anonymous: 'always',
      named: 'never',
      asyncArrow: 'always',
    },
  ],
};

const config = {
  parser: '@typescript-eslint/parser',
  plugins: [
    'react',
    'react-hooks',
    '@typescript-eslint',
  ],
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:jsonc/recommended-with-jsonc',
    'plugin:storybook/recommended',
  ],
  env: { es6: true, browser: true },
  rules: {
    'constructor-super': [ 'error' ],
    'for-direction': [ 'error' ],
    'getter-return': [ 'error' ],
    'no-case-declarations': [ 'error' ],
    'no-class-assign': [ 'error' ],
    'no-compare-neg-zero': [ 'error' ],
    'no-cond-assign': [ 'error' ],
    'no-const-assign': [ 'error' ],
    'no-constant-condition': [ 'error' ],
    'no-control-regex': [ 'error' ],
    'no-debugger': [ 'error' ],
    'no-delete-var': [ 'error' ],
    'no-dupe-args': [ 'error' ],
    'no-dupe-class-members': [ 'error' ],
    'no-dupe-else-if': [ 'error' ],
    'no-dupe-keys': [ 'error' ],
    'no-duplicate-case': [ 'error' ],
    'no-empty-character-class': [ 'error' ],
    'no-empty-pattern': [ 'error' ],
    'no-ex-assign': [ 'error' ],
    'no-fallthrough': [ 'error' ],
    'no-func-assign': [ 'error' ],
    'no-global-assign': [ 'error' ],
    'no-import-assign': [ 'error' ],
    'no-inner-declarations': [ 'error' ],
    'no-invalid-regexp': [ 'error' ],
    'no-irregular-whitespace': [ 'error' ],
    'no-loss-of-precision': [ 'error' ],
    'no-misleading-character-class': [ 'error' ],
    'no-new-symbol': [ 'error' ],
    'no-nonoctal-decimal-escape': [ 'error' ],
    'no-obj-calls': [ 'error' ],
    'no-octal': [ 'error' ],
    'no-redeclare': [ 'error' ],
    'no-regex-spaces': [ 'error' ],
    'no-self-assign': [ 'error' ],
    'no-setter-return': [ 'error' ],
    'no-shadow-restricted-names': [ 'error' ],
    'no-sparse-arrays': [ 'error' ],
    'no-this-before-super': [ 'error' ],
    'no-undef': [ 'error' ],
    'no-unexpected-multiline': [ 'error' ],
    'no-unsafe-finally': [ 'error' ],
    'no-unsafe-negation': [ 'error' ],
    'no-unsafe-optional-chaining': [ 'error' ],
    'no-unused-labels': [ 'error' ],
    'no-useless-backreference': [ 'error' ],
    'no-useless-catch': [ 'error' ],
    'no-useless-escape': [ 'warn' ],
    'no-with': [ 'error' ],
    'require-yield': [ 'error' ],
    'use-isnan': [ 'error' ],
    'valid-typeof': [ 'error' ],
    ...overrideRules,
  },
  overrides: [
    {
      files: [ '**/*.ts?(x)' ],
      rules: {
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': 'error',
      },
    },
  ],
  parserOptions: {
    ecmaFeatures: { jsx: true },
    ecmaVersion: 'latest',
    sourceType: 'module',
  },
  ignorePatterns: [ '*.json' ],

};

module.exports = config;